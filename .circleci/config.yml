version: 2.1

orbs:
  node: circleci/node@5.0.3
  slack: circleci/slack@4.10.1

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rb s3://udapeople-${S3_STRING_RANDOM} --force
            aws cloudformation delete-stack --stack-name udapeople-backend-${S3_STRING_RANDOM}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${S3_STRING_RANDOM}
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

            
jobs:
  build-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: '13.8.0'
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always

  build-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - node/install:
          install-yarn: true
          node-version: '13.8.0'    
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always
  test-frontend:
    docker: 
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - node/install:
          node-version: '13.8.0'     
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always
  test-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - node/install:
          node-version: '13.8.0'  
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always
  scan-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - node/install:
          node-version: '13.8.0'  
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
             npm audit fix --force
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always
  
  scan-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - node/install:
          node-version: '13.8.0' 
      - run:
          name: Scan backend-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
             npm audit fix --force
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and Gzip utilities
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exist
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file backend.yml \
            --stack-name "udapeople-backend-${S3_STRING_RANDOM}" \
            --parameter-overrides ID="${S3_STRING_RANDOM}"  \
            --tags project=udapeople-backend
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file frontend.yml \
            --stack-name "udapeople-frontend-${S3_STRING_RANDOM}" \
            --parameter-overrides ID="${S3_STRING_RANDOM}"  \
            --tags project=udapeople-frontend
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            ls
            touch .circleci/ansible/inventory.txt
            echo "[add]" > .circleci/ansible/inventory.txt
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${S3_STRING_RANDOM}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "$BACKEND_PUBLIC_IP" >> .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt   
      - destroy-environment


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: 
            - build-frontend
      - test-backend:
          requires:
            - build-backend
      - scan-frontend:
          requires:
            - build-frontend
      - scan-backend:
          requires:
            - build-backend
      - deploy-infrastructure:
          filters:
            branches:
              only: [master]