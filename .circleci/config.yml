version: 2.1

orbs:
  node: circleci/node@5.0.3
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1.5

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      # Add parameter here   
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Your code here
            aws s3 rb s3://udapeople-${S3_STRING_RANDOM} --force
            aws cloudformation delete-stack --stack-name udapeople-backend-${S3_STRING_RANDOM}
            aws cloudformation delete-stack --stack-name udapeople-frontend-${S3_STRING_RANDOM}
            

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.
    parameters:
      # Add parameter here     
    steps:
      - run:
          name: Revert migrations
          # Add when this will run
          command: |
            # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
            SUCCESS = 1
            if(( $SUCCESS==1 )); 
            then
            #  cd ~/project/backend
            #  npm install
            #  Add revert code here. You can find this in the Getting Started section.
              exit 1
            fi

            
jobs:
  build-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - node/install:
          install-yarn: true
          node-version: '13.8.0'
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            # Your code here
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always

  build-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - node/install:
          install-yarn: true
          node-version: '13.8.0'    
      - run:
          name: Back-end build
          command: |
            # Your code here
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always
  test-frontend:
    docker: 
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - node/install:
          node-version: '13.8.0'     
      - run:
          name: Run front-end test
          command: |
            cd frontend
            npm install
            npm run test
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always
  test-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - node/install:
          node-version: '13.8.0'  
      - run:
          name: Run backend test
          command: |
            cd backend
            npm install
            npm run test
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always
  scan-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - node/install:
          node-version: '13.8.0'  
      - run:
          name: Scan front-end
          command: |
            cd frontend
            npm install
            # npm install oauth-sign@^0.9.0
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
             npm audit fix --force
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always
  
  scan-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - node/install:
          node-version: '13.8.0' 
      - run:
          name: Scan backend-end
          command: |
            cd backend
            npm install
            # npm install oauth-sign@^0.9.0
            # If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
            # npm audit --audit-level=critical
             npm audit fix --force
      - slack/notify:
          mentions: "@EngineeringTeam"
          event: always

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and Gzip utilities
          command: |
            yum install -y tar gzip
      - run:
          name: Ensure backend infrastructure exist
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file backend.yml \
            --stack-name "udapeople-backend-${S3_STRING_RANDOM}" \
            --parameter-overrides ID="${S3_STRING_RANDOM}"  \
            --tags project=udapeople-backend
      - run:
          name: Ensure frontend infrastructure exist
          command: |
            cd .circleci/files
            aws cloudformation deploy \
            --template-file frontend.yml \
            --stack-name "udapeople-frontend-${S3_STRING_RANDOM}" \
            --parameter-overrides ID="${S3_STRING_RANDOM}"  \
            --tags project=udapeople-frontend
      - run:
          name: Add the EC2 instance IP to the Ansible inventory
          command: |
            touch .circleci/ansible/inventory.txt
            # echo "[add]" > .circleci/ansible/inventory.txt
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${S3_STRING_RANDOM}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "$BACKEND_PUBLIC_IP" >> .circleci/ansible/inventory.txt
            cd .circleci
            ls
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt   
      - destroy-environment
  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
        # You can get this ID in the section where you registered the SSH Key
          fingerprints: ["13:8a:17:46:5f:c9:9e:7f:ec:9f:24:6d:00:d1:9c:fc"]
      - attach_workspace:
          at: ~/      
      - run:
          name: Install Ansible
          command: |
            # Install Ansible
              apk add --update ansible
              apk add --no-cache \
                  python3 \
                  py3-pip \
              && pip3 install --upgrade pip \
              && pip3 install awscli
      - run:
          name: Configure ec2
          command: |
            cd ~/project/.circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - destroy-environment
  run-migration:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Run migrations
          command: |
            cd ~/project/backend
            npm install
            npm run migrations > migration_output.txt
            echo "Migration Result:------"
            
      - run:
          name: check results
          command: |
            cd ~/project/backend
            if grep -q "has been executed successfully" migration_output.txt
            then
              echo "Success"
              echo "insecure" >> ~/.curlrc
              curl --insecure https://kvdb.io/SDAcYQYkcyiPaBKXnXQcgD/migration_${S3_STRING_RANDOM}  -d '1'
            else
              echo "Failure"
              
            fi
      - destroy-environment
  deploy-frontend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl
            pip3 install awscli
      - run:
          name: Get backend url
          command: |
            export BACKEND_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:Name,Values=backend-${S3_STRING_RANDOM}" \
            --query 'Reservations[0].Instances[0].PublicIpAddress' \
            --output text)
            export API_URL="http://${BACKEND_IP}:3030"
            echo $API_URL
            
            echo "API_URL=$API_URL" >> frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm install
            npm run build
            cd dist
            aws s3 sync . "s3://udapeople-${S3_STRING_RANDOM}" --delete
      - revert-migrations
      - destroy-environment
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["13:8a:17:46:5f:c9:9e:7f:ec:9f:24:6d:00:d1:9c:fc"]
      - attach_workspace:
          at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible nodejs npm rsync openssh
            pip install awscli
      - run:
          name: Deploy backend
          command: |
            cd ~/project/.circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations
  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    environment:
      ID: arns3
    steps:
      - checkout
      - run:
          name: install packages
          command: |
            apk add curl
            apk add --no-cache python3 py3-pip
            pip3 install --upgrade pip
            pip3 install awscli
      - run:
          name: smoke test for backend.
          command: |
            BACKEND_IP=`aws --region us-west-2 ec2 describe-instances \
              --filters "Name=tag:Name,Values=backend-${S3_STRING_RANDOM}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text`
            curl "http://${BACKEND_IP}:3030/api/status"
      - run:
          name: smoke test for frontend
          command: |
            FRONTEND_URL="https://udapeople-${S3_STRING_RANDOM}.s3-us-west-2.amazonaws.com/index.html"
            if curl -s ${FRONTEND_URL} | grep "Welcome"
              then
                return 0
              else
                return 1
            fi
  cloudfront-update:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --stack-name udapeople-cloudfront \
              --template-file .circleci/files/cloudfront.yml \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID=${S3_STRING_RANDOM}
      - destroy-environment

  cleanup:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Remove old stacks and files
            command: |
                aws cloudformation delete-stack --stack-name udapeople-cloudfront
                aws cloudformation delete-stack --stack-name udapeople-backend-7c9c0e2
                aws cloudformation delete-stack --stack-name udapeople-frontend-7c9c0e2
  


workflows:
  default:
    jobs:
      - build-frontend
      - build-backend :
          requires: [build-frontend]
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migration:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migration]
      - deploy-backend:
          requires: [run-migration]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]